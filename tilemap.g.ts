// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile3 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex``, img`
2 2 2 2 2 2 2 . 2 2 2 2 2 2 2 2 
2 . . 2 2 2 2 . 2 2 2 2 . . 2 2 
2 2 . 2 2 2 2 2 2 2 2 . . 2 2 2 
2 2 . . 2 2 2 . 2 2 2 . 2 2 2 2 
2 2 2 . . 2 2 . 2 2 2 . 2 2 2 2 
2 2 2 2 . . . . . . 2 . 2 2 2 2 
2 2 2 2 . 2 2 2 2 . . . . 2 2 2 
2 2 2 2 . . 2 2 2 2 2 . . 2 2 2 
2 2 2 2 2 . 2 2 2 2 2 . 2 2 2 2 
2 2 2 2 2 . . . . 2 2 . 2 2 2 2 
2 2 2 2 2 2 2 2 . 2 2 . 2 2 2 2 
2 2 2 2 2 2 2 2 . 2 2 . 2 2 2 2 
2 2 2 2 . 2 2 . . 2 2 . . 2 2 2 
2 . . . . . . . 2 2 2 2 . . 2 2 
2 . 2 2 . 2 2 2 2 2 2 2 2 . . . 
2 . 2 2 . . . . 2 2 2 2 . . 2 2 
`, [myTiles.transparency16,sprites.castle.tileGrass3,sprites.castle.tileGrass1,sprites.castle.tilePath5,myTiles.tile1,myTiles.tile3,sprites.builtin.forestTiles0,sprites.dungeon.collectibleInsignia,sprites.castle.rock0], TileScale.Sixteen);
            case "level3":
            case "level3":return tiles.createTilemap(hex`1000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level4":
            case "level4":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,myTiles.tile1,myTiles.tile3,sprites.castle.tilePath5,sprites.dungeon.collectibleInsignia,sprites.castle.rock0,sprites.builtin.forestTiles0,sprites.castle.tileGrass1], TileScale.Sixteen);
            case "level5":
            case "level5":return tiles.createTilemap(hex``, img`
2 2 2 2 2 2 2 . 2 2 2 2 2 2 2 2 
2 . . 2 2 2 2 . 2 2 2 2 . . 2 2 
2 2 . 2 2 2 2 2 2 2 2 . . 2 2 2 
2 2 . . 2 2 2 . 2 2 2 . 2 2 2 2 
2 2 2 . . 2 2 . 2 2 2 . 2 2 2 2 
2 2 2 2 . . . . . . 2 . 2 2 2 2 
2 2 2 2 . 2 2 2 2 . . . . 2 2 2 
2 2 2 2 . . 2 2 2 2 2 . . 2 2 2 
2 2 2 2 2 . 2 2 2 2 2 . 2 2 2 2 
2 2 2 2 2 . . . . 2 2 . 2 2 2 2 
2 2 2 2 2 2 2 2 . 2 2 . 2 2 2 2 
2 2 2 2 2 2 2 2 . 2 2 . 2 2 2 2 
2 2 2 2 . 2 2 . . 2 2 . . 2 2 2 
2 . . . . . . . 2 2 2 2 . . 2 2 
2 . 2 2 . 2 2 2 2 2 2 2 2 . . . 
2 . 2 2 . . . . 2 2 2 2 . . 2 2 
`, [myTiles.transparency16,sprites.castle.tileGrass3,sprites.castle.tileGrass1,sprites.castle.tilePath5,myTiles.tile1,myTiles.tile3,sprites.builtin.forestTiles0,sprites.dungeon.collectibleInsignia,sprites.castle.rock0], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "tile1":return tile1;
            case "tile2":return tile2;
            case "tile3":return tile3;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
